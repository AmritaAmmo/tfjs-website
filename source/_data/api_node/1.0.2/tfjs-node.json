{
  "docs": {
    "headings": [
      {
        "name": "TensorBoard",
        "description": "",
        "subheadings": [
          {
            "symbols": [
              {
                "docInfo": {
                  "heading": "TensorBoard",
                  "namespace": "node"
                },
                "symbolName": "summaryFileWriter",
                "namespace": "node",
                "paramStr": "(logdir, maxQueue?, flushMillis?, filenameSuffix?)",
                "parameters": [
                  {
                    "name": "logdir",
                    "documentation": "Log directory in which the summary data will be written.",
                    "type": "string",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "maxQueue",
                    "documentation": "Maximum queue length (default: `10`).",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "flushMillis",
                    "documentation": "Flush every __ milliseconds (default: `120e3`, i.e,\n`120` seconds).",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "filenameSuffix",
                    "documentation": "Suffix of the protocol buffer file names to be\nwritten in the `logdir` (default: `.v2`).",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "SummaryFileWriter",
                "documentation": "Create a summary file writer for TensorBoard.\n\nExample:\n```javascript\nconst tf = require('@tensorflow/tfjs-node');\n\nconst summaryWriter = tf.node.summaryFileWriter('/tmp/tfjs_tb_logdir');\n\nfor (let step = 0; step < 100; ++step) {\n  summaryWriter.scalar('dummyValue', Math.sin(2 * Math.PI * step / 8), step);\n}\n```",
                "fileName": "#93",
                "githubUrl": "https://github.com/tensorflow/tfjs-node/blob/v1.0.2/src/tensorboard.ts#L93-L110",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "TensorBoard",
                  "namespace": "node"
                },
                "symbolName": "tensorBoard",
                "namespace": "node",
                "paramStr": "(logdir?, args?)",
                "parameters": [
                  {
                    "name": "logdir",
                    "documentation": "Directory to which the logs will be written.",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "args",
                    "documentation": "Optional configuration arguments.",
                    "type": "TensorBoardCallbackArgs",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "TensorBoardCallback",
                "documentation": "Callback for logging to TensorBoard durnig training.\n\nWrites the loss and metric values (if any) to the specified log directory\n(`logdir`) which can be ingested and visualized by TensorBoard.\nThis callback is usually passed as a callback to `tf.Model.fit()` or\n`tf.Model.fitDataset()` calls during model training. The frequency at which\nthe values are logged can be controlled with the `updateFreq` field of the\nconfiguration object (2nd argument).\n\nUsage example:\n```js\n// Constructor a toy multilayer-perceptron regressor for demo purpose.\nconst model = tf.sequential();\nmodel.add(\n     tf.layers.dense({units: 100, activation: 'relu', inputShape: [200]}));\nmodel.add(tf.layers.dense({units: 1}));\nmodel.compile({\n   loss: 'meanSquaredError',\n   optimizer: 'sgd',\n   metrics: ['MAE']\n});\n\n// Generate some random fake data for demo purpose.\nconst xs = tf.randomUniform([10000, 200]);\nconst ys = tf.randomUniform([10000, 1]);\nconst valXs = tf.randomUniform([1000, 200]);\nconst valYs = tf.randomUniform([1000, 1]);\n\n// Start model training process.\nawait model.fit(xs, ys, {\n   epochs: 100,\n   validationData: [valXs, valYs],\n    // Add the tensorBoard callback here.\n   callbacks: tf.node.tensorBoard('/tmp/fit_logs_1')\n});\n```\n\nThen you can use the following commands to point tensorboard\nto the logdir:\n\n```sh\npip install tensorboard  # Unless you've already installed it.\ntensorboard --logdir /tmp/fit_logs_1\n```",
                "fileName": "#290",
                "githubUrl": "https://github.com/tensorflow/tfjs-node/blob/v1.0.2/src/callbacks.ts#L290-L293",
                "isFunction": true
              }
            ]
          }
        ]
      }
    ]
  },
  "docLinkAliases": {},
  "configInterfaceParamMap": {
    "TFJSBinding": [
      {
        "name": "TensorMetadata",
        "documentation": "",
        "type": "typeof TensorMetadata",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "TFEOpAttr",
        "documentation": "",
        "type": "typeof TFEOpAttr",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "TF_FLOAT",
        "documentation": "",
        "type": "number",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "TF_INT32",
        "documentation": "",
        "type": "number",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "TF_INT64",
        "documentation": "",
        "type": "number",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "TF_BOOL",
        "documentation": "",
        "type": "number",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "TF_COMPLEX64",
        "documentation": "",
        "type": "number",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "TF_STRING",
        "documentation": "",
        "type": "number",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "TF_RESOURCE",
        "documentation": "",
        "type": "number",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "TF_ATTR_STRING",
        "documentation": "",
        "type": "number",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "TF_ATTR_INT",
        "documentation": "",
        "type": "number",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "TF_ATTR_FLOAT",
        "documentation": "",
        "type": "number",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "TF_ATTR_BOOL",
        "documentation": "",
        "type": "number",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "TF_ATTR_TYPE",
        "documentation": "",
        "type": "number",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "TF_ATTR_SHAPE",
        "documentation": "",
        "type": "number",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "TF_ATTR_RESOURCE",
        "documentation": "",
        "type": "number",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "TF_Version",
        "documentation": "",
        "type": "string",
        "optional": false,
        "isConfigParam": true
      }
    ],
    "DataId": [],
    "TensorBoardCallbackArgs": [
      {
        "name": "updateFreq",
        "documentation": "The frequency at which loss and metric values are written to logs.\n\nCurrently supported options are:\n\n- 'batch': Write logs at the end of every batch of training, in addition\n   to the end of every epoch of training.\n- 'epoch': Write logs at the end of every epoch of training.\n\nNote that writing logs too often slows down the training.\n\nDefault: 'epoch'.",
        "type": "'batch'|'epoch'",
        "optional": true,
        "isConfigParam": true
      }
    ]
  },
  "inlineTypes": {},
  "docTypeAliases": {}
}